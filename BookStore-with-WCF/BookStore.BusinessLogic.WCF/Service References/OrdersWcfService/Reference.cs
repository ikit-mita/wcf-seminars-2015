//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BookStore.BusinessLogic.WCF.OrdersWcfService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="OrdersWcfService.IOrdersWcfService")]
    public interface IOrdersWcfService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrdersWcfService/ValidateOrder", ReplyAction="http://tempuri.org/IOrdersWcfService/ValidateOrderResponse")]
        string ValidateOrder(int branchId, System.Collections.Generic.List<BookStore.BusinessLogic.OrderedBookDescription> orderedBooks);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrdersWcfService/ValidateOrder", ReplyAction="http://tempuri.org/IOrdersWcfService/ValidateOrderResponse")]
        System.Threading.Tasks.Task<string> ValidateOrderAsync(int branchId, System.Collections.Generic.List<BookStore.BusinessLogic.OrderedBookDescription> orderedBooks);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrdersWcfService/SaveOrder", ReplyAction="http://tempuri.org/IOrdersWcfService/SaveOrderResponse")]
        BookStore.Model.Order SaveOrder(int branchId, int customerId, int employeeId, System.Collections.Generic.List<BookStore.BusinessLogic.OrderedBookDescription> orderedBooks);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrdersWcfService/SaveOrder", ReplyAction="http://tempuri.org/IOrdersWcfService/SaveOrderResponse")]
        System.Threading.Tasks.Task<BookStore.Model.Order> SaveOrderAsync(int branchId, int customerId, int employeeId, System.Collections.Generic.List<BookStore.BusinessLogic.OrderedBookDescription> orderedBooks);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IOrdersWcfServiceChannel : BookStore.BusinessLogic.WCF.OrdersWcfService.IOrdersWcfService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class OrdersWcfServiceClient : System.ServiceModel.ClientBase<BookStore.BusinessLogic.WCF.OrdersWcfService.IOrdersWcfService>, BookStore.BusinessLogic.WCF.OrdersWcfService.IOrdersWcfService {
        
        public OrdersWcfServiceClient() {
        }
        
        public OrdersWcfServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public OrdersWcfServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OrdersWcfServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OrdersWcfServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string ValidateOrder(int branchId, System.Collections.Generic.List<BookStore.BusinessLogic.OrderedBookDescription> orderedBooks) {
            return base.Channel.ValidateOrder(branchId, orderedBooks);
        }
        
        public System.Threading.Tasks.Task<string> ValidateOrderAsync(int branchId, System.Collections.Generic.List<BookStore.BusinessLogic.OrderedBookDescription> orderedBooks) {
            return base.Channel.ValidateOrderAsync(branchId, orderedBooks);
        }
        
        public BookStore.Model.Order SaveOrder(int branchId, int customerId, int employeeId, System.Collections.Generic.List<BookStore.BusinessLogic.OrderedBookDescription> orderedBooks) {
            return base.Channel.SaveOrder(branchId, customerId, employeeId, orderedBooks);
        }
        
        public System.Threading.Tasks.Task<BookStore.Model.Order> SaveOrderAsync(int branchId, int customerId, int employeeId, System.Collections.Generic.List<BookStore.BusinessLogic.OrderedBookDescription> orderedBooks) {
            return base.Channel.SaveOrderAsync(branchId, customerId, employeeId, orderedBooks);
        }
    }
}
